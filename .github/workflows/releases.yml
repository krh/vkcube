name: Release Releases for dxvk-tests

permissions:
  contents: write

on:
  push:
    branches:
      - master
    tags:
      - v[0-9]+.*
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Build project action
        uses: ./.github/actions/project_build

      - name: Rename linux build artifacts
        run: |
          mv builddir/vkcube builddir/vkcube-linux
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: |
            builddir/vkcube-linux
          if-no-files-found: error

  do_release:
    runs-on: ubuntu-latest
    needs: build_artifacts

    steps:
      - name: Unpack build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: builddir

      - name: Delete existing latest_build Pre-Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            for (const release of releases) {
              if (release.prerelease && release.name.startsWith('Latest build of branch')) {
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                });
              }
            }
            const { data: tags } = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/latest_build',
            });
            if (tags.length > 0)
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/latest_build',
              });

      - name: Check Tag Format
        id: check_tag
        if: startsWith(github.ref, 'refs/tags/') # Ensure this runs for tags only
        run: |
          if [[ "${{ github.ref_name }}" =~ ^v[0-9]+.*$ ]]; then
            echo "tag_matches=true" >> $GITHUB_OUTPUT
          else
            echo "tag_matches=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Create latest build Pre-Release
        if: steps.check_tag.outputs.tag_matches != 'true'
        uses: ncipollo/release-action@v1
        with:
          prerelease: true
          draft: false
          allowUpdates: true
          removeArtifacts: true
          name: Latest build of branch ${{ github.ref_name }}
          commit: ${{ github.ref }}
          tag: latest_build
          artifacts: |
            builddir/*

      - name: Create Tagged Release
        if: steps.check_tag.outputs.tag_matches == 'true'
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          removeArtifacts: true
          name: Release ${{ github.ref_name }}
          tag: ${{ github.ref_name }}
          artifacts: |
            builddir/*
